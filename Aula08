using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Aula08ListasERepeticao
{
    class Program
    {
        static void Main(string[] args)
        {

            //Deixar a lista de nomes fora do Main com o "static", porque se você deixar ela dentro, você vai perder o valor digitado quando você reiniciar o programa. O nome disso é: Variável Global.

            // Se você quer mostrar 3 vezes, entao faça algo como int contador = 0; while (contador < 3)

            // Para somar a posição ao código, ao invés de escrever Console.WriteLine($"Nome: {nomes [0]}"); ...{nomes [1]}, etc... substitua pela variável que você está usando como contador ex: Console.WriteLine($"Nome: {nomes [contador]}");

            // E para saber quantos dados tem na sua lista, crie uma variável e use o Count, exemplo: int quantidade = nomes.Count;

            List<string> nomes = new List<string>();

            nomes.Add("Kennedy");
            nomes.Add("Natália");
            nomes.Add("Eduardo");

            int quantidade = nomes.Count;

            int contador = 0;
            while ( contador < quantidade )
            {
                Console.WriteLine($"Nome: {nomes [contador]}");
                contador += 1;
            }

            Console.ReadKey();

        }

        void Repeticao ()
        {
            // Laço de repetição (LOOP)
            // O while tem o funcionamento semelhante ao do if, lendo fica: "Enquanto essa condição for verdadeira, ele sempre vai mostrar. Em código fica: ||while (1 > 0) { Console.WriteLine("Olá") || }
            // O while serve para que ao invés de repetir o código várias vezes, você só faça uma linha de código.

            // Uma forma de fazer a soma é: contador = contador + 1;
            // Uma forma simplificada de fazer a soma é: contador += 1;
            // E isso se aplica a todos os tipos de conta, ex: contador -=1; contador *= 1; contador \= 1; 

            // O comando contador++; serve para somar SOMENTE +1.

            // OS LAÇOS DE REPETIÇÃO SERVEM PARA SIMPLIFICAR

            int contador = 0;

            while (contador < 5)
            {
                Console.WriteLine("SORVETE É A MELHOR COISA DO MUNDO!!!!!");
                contador = +1;
            }

            Console.ReadKey();



        }

        void Listas() 
        {
            // As listas são iguais ao Array, porém, elas tem o tamanho autonático, ou seja, é flexivel.
            // As listas, diferentemente dos Arrays, terminam com um ();
            // Assim como WriteLine é um comando padrão dentro do console, existem comandos que só podem ser feitos dentro de uma lista. 
            // O comando Add conta o que você já escreveu, e soma com o que você está escrevendo agora, sem precisar falar em qual posição está, ele vai automáticamente pra próxima linha.
            // E para mostrar o comando é igual ao Array.
            // int quantidade = nomes.Count; Esse comando é uma variavel que serve para contar quantas coisas existem dentro da sua lista.
            // Também é possivel só executar o comando dentro das chaves no próprio Console.WriteLine, mas não é recomendado, pois o código fica sujo.
            // O comando nomes.Remove("Natanael"); serve para remover o usuário, e ele re-ordena as casas.
            // O comando nomes.RemoveAt(3); remove pela posição.


            List<string> nomes = new List<string>();

            nomes.Add("Jonatas");
            nomes.Add("Natanael");
            nomes.Add("Bruno");


            Console.WriteLine($"O primeiro é {nomes[0]}");
            Console.WriteLine($"O segundo é {nomes[1]}");
            Console.WriteLine($"O terceiro é {nomes[2]}");

            Console.WriteLine("Digite o seu nome:");
            nomes.Add(Console.ReadLine());


            nomes.RemoveAt(3);


            int quantidade = nomes.Count;
            Console.WriteLine($"Existem {quantidade} usuários cadastrados!");

            Console.ReadKey();
        }
       

        void Arrays()
        {
            // Array (Ou vetor, mas ngm chama assim) = É um conjunto de dados (agrupado de informações).
            // Só pode conter um tipo em cada array.
            // [] significa conjunto.
            // SOMENTE EM C# você precisa especificar a quantidade de coisas que você vai colocar dentro do array.
            // A contagem sempre começa do 0 quando você vai mencionar a posição, ou seja o ZERO sempre vai ser o PRIMEIRO número da contagem.
            // Porém quando você vai criar precisa ser a contagem correta.
            // Ctrl+D na linha selecionada duplica a frase.
            // Para guardar algo dentro de um Array, é da mesma forma que se guarda uma string comum.


            string[] nomes = new string[3];

            nomes[0] = "Kennedy";
            nomes[1] = "Wendell";
            nomes[2] = "Mirela";

            Console.WriteLine($"O nome da primeira posição é {nomes [0]}");
            Console.WriteLine($"O nome da segunda posição é {nomes[1]}");
            Console.WriteLine($"O nome da terceira posição é {nomes[2]}");

            Console.ReadKey();


        }
    }
}
